all installed dependencies are stored in the package.json
to run js code you can do so in a terminal 
       node fileName e.g node test to run test.js file

we can use modules in node
we can run a file in another file using require('path')

we can create ,write and delete files in js
we can also create and delete directories in js
the call module for this is fs standing for file system


to manage 3rd party packkages we use npm node package manager


to avoid restarting server each time we can install a package called nodemon globally npm install -g nodemon 
then to run a server and enable auto restarts instead of node filename use nodemon filename



express allows us to easily manage our routing
go to the express page on the npm website


EJS (Embedded JavaScript): A popular templating engine with support for embedding JavaScript code within templates.


always remember when you find yourself repeating code there is something you are not doing right
we can avoid repeating using partials
example in the practice files the nav and headers were repeating so 
you create a partials folder in the views in it create individal files of repeating codes with ejs extension
to include the code where needed use
              <%- include('./partials/nav.ejs')%>
<%=%> leaves out special characters
not repeating also makes editing easy


the css can go in the header file


middleware is code that runs in the server btwn getting a request and psending a response
app.use() runs regardless of the route('/','/about'...) or method (get,post,delete...)
the code runs up down so app.use should come after all app.get are written


static files such as css and images can not be accessed directly to access them we can use static midddleware that comes along with express

app.use(express.static('public'))//any file in public folder will be accessible in all files